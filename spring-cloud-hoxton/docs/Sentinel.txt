
https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/sentinel-example/sentinel-core-example/readme-zh.md


安装：
    1、默认端口8080
    2、直接java -jar 启动

服务雪崩：
    1、因服务提供者不可用导致服务调用者不可用，并将不可用逐步放大的过程
    2、A ——> B --> C --> D，D不可用，流量激增后，导致C、B也不可用，并且逐步放大，影响整个系统


统一异常处理：
    1、方式一：实现BlockExceptionHandler接口，交有IoC容器
    2、方式二：@SentinelResource配置每个方法的blockHandler

@SentinelResource：
    1、value：资源名称，一般和方法名称保持一致
    2、blockHandler：规则回调方法
        方法默认必须在本类中，必须是public，返回值和原方法返回值必须一致
        包含原方法参数，同时最后一个参数必须包含异常类型
    3、blockHandlerClass：
        回调方法不再当前类时，设置流控类，方法必须为pubic static
    4、fallback：出现异常后的处理方法
    5、blockHandler优先级高于fallback
    6、exceptionsToIgnore：忽略异常不处理

流控规则：
    1、应用场景：洪峰流量、晓峰填谷、冷热启动、API Gateway
        一般配置在服务方，针对不同来源、web接口进行流控
        梳理核型接口，针对核型接口做压测，配置相应阈值
    2、可以针对QPS、线程数配置阈值
    3、流控模式配置：
        1）直接：超过阈值流控只针对当前接口
        2）关联：关联资源超过配置阈值，导致当前资源将被流控
            （当前资源被限流是因另外一个资源配置超过阈值引起的）
        3）链路：入口资源超过配置阈值，将被流控限制访问当前资源，其它入口资源可以正常问当前资源
            必须配置spring.cloud.sentinel.web-context-unify: false # 关闭链路收敛才能生效
            如果流控方法级别：全局异常处理不会生效，只能使用@SentinelResource单独配置
            A（入口）
            B（入口）
            C（当前）
            A、B访问C，当A超过阈值时将被流控，B正常访问C
    4、流控效果配置：
        1）快速失败：查过阈值后直接拒绝
        2）Warm Up（针对激增流量）：预热，可以配置预热时常，慢慢的接受流量
            加载因子默认3，阈值/默认加载因子，递增接收流量
        3）排队等待（针对脉冲流量）：可以配置超时时间（毫秒），超时时间内的请求不会直接失败，而是等待



降级规则：
    1、应用场景：一般配置在消费方
    2、降级处理：
        1）fallback实现后续逻辑
        2）返回错误result
        3）db访问降级时读取缓存
    3、熔断策略：
        1）慢调用比例：
            最大RT：超过相应时间阈值（单位毫秒）
            比例阈值：【最小请求次数】中超过【最大RT】的比例
            熔断时常：熔断持续时间，超过熔断时间后进入半开状态，如果第一次请求失败，继续熔断
            最小请求次数：熔断判断的最小请求次数，类似时间窗口
        2）异常比例：
            比例阈值：
            熔断时间：
            最小请求次数：
            统计时常：单位时间内
        3）异常数：
    4、热点策略：
        1、针对方法的热点参数、controller中的热点接口
        2、必须结合@SentinelResource使用，配置blockHandler
        3、限流模式：默认只有QPS模式
        4、参数索引：参数在方法中的index位置
        5、单机阈值：针对【参数索引】中的配置参数的阈值
        6、统计窗口时常：

系统规则：
    1、LOAD：
    2、RT：
    3、线程数：
    4、入口QPS：所有接口QPS平均
    5、CPU使用率：阈值cpu占用百分比



持久化：
    1、原始模式：数据保存在内存中
    2、pull模式：
    3、push模式：
        1）引入sentinel-datasource-nacos依赖
        2）在nacos中创建配置信息
Sentinel+OpenFeign：
    1、在sprigcloud h.sr11版本出现循环依赖问题，将为h.sr9没有问题
    2、配置feign.sentinel.enabled=true，开启对sentinel支持
    3、使用上与hystrix一样